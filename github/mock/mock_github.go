// Code generated by MockGen. DO NOT EDIT.
// Source: github.go

// Package mock_github is a generated GoMock package.
package mock_github

import (
	gomock "github.com/golang/mock/gomock"
	github "github.com/hayashiki/lemur/github"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// PushNewFileToBranch mocks base method
func (m *MockClient) PushNewFileToBranch(arg0 *github.GitCommit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushNewFileToBranch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushNewFileToBranch indicates an expected call of PushNewFileToBranch
func (mr *MockClientMockRecorder) PushNewFileToBranch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushNewFileToBranch", reflect.TypeOf((*MockClient)(nil).PushNewFileToBranch), arg0)
}

// CreateNewPullRequest mocks base method
func (m *MockClient) CreateNewPullRequest(arg0 *github.GitCommit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewPullRequest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewPullRequest indicates an expected call of CreateNewPullRequest
func (mr *MockClientMockRecorder) CreateNewPullRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewPullRequest", reflect.TypeOf((*MockClient)(nil).CreateNewPullRequest), arg0)
}
